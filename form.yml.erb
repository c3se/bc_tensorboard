<%-
  # get _list_partitions
  p_cmd = "sinfo -ho %R | sort -u"
  begin
    output, status = Open3.capture2e(p_cmd)
    if status.success?
      _list_partitions = output.split("\n").map(&:strip).reject(&:blank?).sort
    else
      raise output
    end
  rescue => e
    _list_partitions = []
    p_error = e.message.strip
  end

  # get tensorboard modules
  m_cmd = "bash -il -c 'module -t avail tensorboard 2>&1 | grep tensorboard' 2>/dev/null"
  begin
    output, status = Open3.capture2e(m_cmd)
    if status.success?
      _list_tf_versions = output.split("\n").map(&:strip).reject(&:blank?).sort
    else
      raise output
    end
  rescue => e
    _list_tf_versions = []
    m_error = e.message.strip
  end
-%>
---
cluster: "alvis1"

form:
  - tb_logdir
  - tb_extra_args
  #- sh_tf_version
  #- sh_modules
  #- sh_partition
  #- sh_cpus
  #- sh_gpus
  #- sh_mem
  #- bc_num_hours
  #- bc_email_on_started

attributes:

  tb_logdir:
    label: "Tensorboard logdir"
    required: true
    data-filepicker: true
    data-target-file-type: dirs  # Valid values are: files, dirs, or both
    help: "The directory that contains data to visualize."

  tb_extra_args:
    label: "Additional TensorBoard arguments (optional)"

#  sh_tf_version:
#    label: "Tensorboard version"
#    <%- if m_error -%>
#      <span class="text-danger">Error when parsing module versions:</span>
#      ```
#      <%= m_error.gsub("\n", "\n      ") %>
#      ```
#    <%- end -%>
#    <%- if _list_tf_versions.blank? -%>
#    widget: text_field
#    <%- else -%>
#    widget: select
#    options:
#      <%- _list_tf_versions.each do |q| -%>
#      - [ "<%= q %>", "<%= q %>" ]
#      <%- end -%>
#    <%- end -%>
#
#  sh_modules:
#    label: "Additional modules (optional)"
#    help: |
#        <small>Space separated list of additional modules to load (eg. `py-numpy/1.17.2_py36`)</br/>
#        Full list at https://www.sherlock.stanford.edu/docs/software/list </small>
#
#  sh_partition:
#    label: "Partition"
#    value: "dev"
#    required: true
#    help: |
#      <small>Partition to submit the job to</small>
#    <%- if p_error -%>
#      <span class="text-danger">Error when parsing partitions:</span>
#      ```
#      <%= p_error.gsub("\n", "\n      ") %>
#      ```
#    <%- end -%>
#    <%- if _list_partitions.blank? -%>
#    widget: text_field
#    <%- else -%>
#    widget: select
#    options:
#      <%- _list_partitions.each do |q| -%>
#      - [ "<%= q %>", "<%= q %>" ]
#      <%- end -%>
#    <%- end -%>
#
#  sh_cpus:
#    label: "#CPUs"
#    widget: "number_field"
#    help: "<small>Number of CPU cores to allocate</small>"
#    required: true
#    min: 1
#    value: "1"
#
#  sh_gpus:
#    label: "#GPUs (optional)"
#    widget: "number_field"
#    help: "<small>Number of GPUs to allocate (don't forget to load the `cuda` module in the `Modules` field above and to select a partition with GPUs)</small>"
#    min: 1
#    max: 8
#    value: ""
#
#  sh_mem:
#    label: "Memory (GB) (optional)"
#    widget: "number_field"
#    help: "<small>Amount of memory to allocate</small>"
#
#  bc_num_hours:
#    label: "Runtime (in hours)"
